import re
from enum import Enum
import math
from typing import *
from datetime import datetime
import numpy as np
from collections import *
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import SeqFeature
# import pyrobot

class Relation:
    class Set(OrderedDict, MutableSet):
        '''https://stackoverflow.com/a/1653978'''
        def update(self, *args, **kwargs):
            if kwargs:
                raise TypeError('update() takes no keyword arguments')
            for s in args:
                for e in s:
                    self.add(e)
        def add(self, elem):
            self[elem] = None
        def discard(self, elem):
            self.pop(elem, None)
        def __le__(self, other) -> bool:
            return all(e in other for e in self)
        def __lt__(self, other) -> bool:
            return self <= other and self != other
        def __ge__(self, other) -> bool:
            return all(e in self for e in other)
        def __gt__(self, other) -> bool:
            return self >= other and self != other
        def __repr__(self) -> str:
            return 'Set([{}])'.format(', '.join(map(repr, self.keys())))
        def __str__(self) -> str:
            return '{%s}' % '{}'.format(', '.join(map(repr, self.keys())))
        difference = property(lambda self: self.__sub__)
        difference_update = property(lambda self: self.__isub__)
        intersection = property(lambda self: self.__and__)
        intersection_update = property(lambda self: self.__iand__)
        issubset = property(lambda self: self.__le__)
        issuperset = property(lambda self: self.__ge__)
        symmetric_difference = property(lambda self: self.__xor__)
        symmetric_difference_update = property(lambda self: self.__ixor__)
        union = property(lambda self: self.__or__)
    def __init__(self):
        self.__nodes = Relation.Set()
        self._edges = np.zeros((0, 0), dtype=int)
    def addNode(self, node):
        if node not in self.__nodes:
            if self._edges.shape == (0, 0):
                self._edges = np.zeros((1, 1), dtype=int)
            else:
                self._edges = np.append(self._edges, [[0] * self._edges.shape[0]], axis=0)
                self._edges = np.append(self._edges, [[0]] * self._edges.shape[0], axis=1)
        self.__nodes.add(node)
    def getAllNodes(self) -> Set:
        nodes = Relation.Set()
        for node in self.__nodes:
            nodes.add(node)
        return nodes
class Graph(Relation):
    def addUndirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)], self._edges[list(self.getAllNodes()).index(second)][list(self.getAllNodes()).index(first)] = 1, 1
    def removeUndirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)], self._edges[list(self.getAllNodes()).index(second)][list(self.getAllNodes()).index(first)] = 0, 0
class DirectedGraph(Relation):
    def addDirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)] = 1
    def removeDirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)] = 0
class WeightedGraph(Relation):
    def addWeightedEdge(self, first, second, edgeWeight: int):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)] = edgeWeight if type(edgeWeight) in {int} else self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)]
    def removeDirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)] = 0
class GridGraph(Relation):
    class Node:
        def __init__(self, x: int, y: int, val):
            self.x = x if type(x) in {int} else math.nan
            self.y = y if type(y) in {int} else math.nan
            self.__value = val
        def value(self):
            return self.__value
        def __repr__(self) -> str:
            return repr(self.value())
        def __str__(self) -> str:
            return str(self.value())
        def __eq__(self, other) -> bool:
            return self.x == other.x and self.y == other.y and self.value() == other.value()
        def __ne__(self, other) -> bool:
            return self.x != other.x or self.y != other.y or self.value() != other.value()
        def __key(self):
            return ((self.x, self.y), self.value())
        def __hash__(self) -> int:
            return hash(self.__key())
    def addNode(self, node):
        if type(node) in {GridGraph.Node}:
            super(GridGraph, self).addNode(node)
    def addGridNode(self, x: int, y: int, val):
        self.addNode(self.Node(x, y, val))
    def addUndirectedEdge(self, first, second):
        if math.sqrt((first.x - second.x) ** 2 + (first.y - second.y) ** 2) == 1:
            self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)], self._edges[list(self.getAllNodes()).index(second)][list(self.getAllNodes()).index(first)] = 1, 1
    def removeUndirectedEdge(self, first, second):
        self._edges[list(self.getAllNodes()).index(first)][list(self.getAllNodes()).index(second)], self._edges[list(self.getAllNodes()).index(second)][list(self.getAllNodes()).index(first)] = 0, 0

class Person:
    class Name:
        def __capitalize(self, txt: str) -> str:
            txt = list(txt.lower())
            flag = False
            for l in range(len(txt)):
                if not flag and txt[l].isalpha():
                    txt[l] = txt[l].upper()
                    flag = True
                elif txt[l].isspace() or txt[l] == '-' or txt[l] == '\'' or txt[l] == '.':
                    flag = False
                elif txt[l] == '\u0000':
                    flag = not flag
            return ''.join(''.join(txt).split('\u0000'))
        def __init__(self, first: str = '', middle: str = '', last: str = '', suffix: str = '', nick: str = '', title: str = ''):
            self.__first = self.__capitalize(first)
            self.__middle = self.__capitalize(middle)
            self.__last = self.__capitalize(last)
            self.__suffix = ''
            if suffix.lower() in {'jr.', 'sr.', 'esq.'}:
                self.__suffix = self.__capitalize(suffix)
            elif re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', suffix.lower()):
                self.__suffix = suffix.upper()
            elif re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', suffix.lower()):
                self.__suffix = suffix.upper()
            self.__nick = self.__capitalize(nick)
            self.__title = self.__capitalize(title) if title.lower() in {'mister', 'mistress', 'miss', 'doctor', 'general', 'brigadier', 'colonel', 'lieutenant colonel', 'major', 'captain', 'lieutenant', 'second lieutenant', 'officer cadet', 'warrant officer', 'sergeant', 'corporal', 'private', 'admiral', 'vice admiral', 'rear admiral', 'commodore', 'captain', 'commander', 'lieutenant commander', 'lieutenant', 'lieutenant junior grade', 'ensign', 'officer cadet', 'warrant officer', 'petty officer', 'leading seaman', 'seaman'} else ''
        def first(self) -> str:
            return self.__first
        def setFirst(self, *names: int):
            if len(names) > 0:
                self.__first = ' '.join([self.__first.split()[name] for name in names if 0 <= name and name < len(self.__first.split())])
                if list(names)[-1] == len(self.__first.split()) and len(self.__middle) > 0:
                    self.__first += ' ' + self.__middle
                    self.__middle = ''
            else:
                self.__first = self.__first.split()
                for name in range(len(self.__first)):
                    self.__first[name] = self.__first[name][0]
                self.__first = '. '.join(self.__first) + '.'
        def middle(self) -> str:
            return self.__middle
        def setMiddle(self, *names: int):
            if len(names) > 0:
                self.__middle = ' '.join([self.__middle.split()[name] for name in names])
            else:
                self.__middle = self.__middle.split()
                for name in range(len(self.__middle)):
                    self.__middle[name] = self.__middle[name][0]
                self.__middle = '. '.join(self.__middle) + '.'
        def last(self) -> str:
            return self.__last
        def setLast(self, *names: int):
            if len(names) > 0:
                self.__last = ' '.join([self.__last.split()[name] for name in names])
            else:
                self.__last = self.__last.split()
                for name in range(len(self.__last)):
                    self.__last[name] = self.__last[name][0]
                self.__last = '. '.join(self.__last) + '.'
        def suffix(self) -> str:
            return self.__suffix
        def setSuffix(self, suffix: str):
            self.__suffix = ''
            if suffix.lower() in {'jr.', 'sr.', 'esq.'}:
                self.__suffix = self.__capitalize(suffix)
            elif re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', suffix.lower()):
                self.__suffix = suffix.upper()
            elif re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', suffix.lower()):
                self.__suffix = suffix.upper()
        def nickname(self) -> str:
            return self.__nick
        def setNickname(self, nick: str):
            self.__nick = self.__capitalize(nick)
        def title(self) -> str:
            return self.__title
        def setTitle(self):
            self.__title = {'Mister': 'Mr.', 'Mistress': 'Mrs.', 'Miss': 'Ms.', 'Doctor': 'Dr.', 'General': 'Gen.', 'Brigadier': 'Brig.', 'Colonel': 'Col.', 'Lieutenant Colonel': 'Lt. Col.', 'Major': 'Maj.', 'Captain': 'Capt.', 'Lieutenant': 'Lt.', 'Second Lieutenant': '2nd Lt.', 'Sergeant': 'Sgt.', 'Corporal': 'Cpl.', 'Private': 'Pvt.', 'Admiral': 'Adm.', 'Vice Admiral': 'Vice Adm.', 'Rear Admiral': 'Rear Adm.', 'Commander': 'Cmdr.', 'Lieutenant Commander': 'Lt. Cmdr.', 'Lieutenant Junior Grade': 'Lt. j.g.'}[self.__title]
        def __repr__(self) -> str:
            name = self.first()
            if len(self.middle()) > 0:
                name += (' ' if len(name) > 0 else '') + self.middle()
            if len(self.nickname()) > 0:
                name += (' ' if len(name) > 0 else '') + ('\'' if '\'' not in self.nickname() else '"') + self.nickname() + ('\'' if '\'' not in self.nickname() else '"')
            if len(self.last()) > 0:
                name += (' ' if len(name) > 0 else '') + self.last()
            if len(self.suffix()) > 0:
                if self.suffix() in {'Jr.', 'Sr.', 'Esq.'}:
                    name += (', ' if len(name) > 0 else '') + self.suffix()
                else:
                    name += (' ' if len(name) > 0 else '') + self.suffix()
            return self.title() + (' ' if len(self.title()) > 0 and len(name) > 0 else '') + name
        def __eq__(self, other) -> bool:
            return self.first() == other.first() and self.middle() == other.middle() and self.last() == other.last() and (self.suffix() == other.suffix() or {self.suffix(), other.suffix()} < {'Sr.', 'I', '\u0391\u0374'} or {self.suffix(), other.suffix()} < {'Jr.', 'II', '\u0392\u0374'}) and self.nickname() == other.nickname() and (self.title() == other.title() or frozenset({self.title(), other.title()}) in {frozenset({''}), frozenset({'Mister', 'Mr.'}), frozenset({'Mistress', 'Mrs.'}), frozenset({'Miss', 'Ms.'}), frozenset({'Doctor', 'Dr.'})})
        def __ne__(self, other) -> bool:
            return self.first() != other.first() or self.middle() != other.middle() or self.last() != other.last() or not (self.suffix() == other.suffix() or {self.suffix(), other.suffix()} < {'Sr.', 'I', '\u0391\u0374'} or {self.suffix(), other.suffix()} < {'Jr.', 'II', '\u0392\u0374'}) or self.nickname() != other.nickname() or self.title() != other.title() and frozenset({self.title(), other.title()}) not in {frozenset({''}), frozenset({'Mister', 'Mr.'}), frozenset({'Mistress', 'Mrs.'}), frozenset({'Miss', 'Ms.'}), frozenset({'Doctor', 'Dr.'})}
        def __lt__(self, other) -> bool:
            def rtoi(txt: str) -> int:
                roman = {'I': 1, 'IV': 4, 'V': 5, 'IX': 9, 'X': 10, 'XL': 40, 'L': 50, 'XC': 90, 'C': 100, 'CD': 400, 'D': 500, 'CM': 900, 'M': 1000}
                i = 0
                num = 0
                while i < len(txt):
                    if i + 1 < len(txt) and txt[i:i+2] in roman:
                        num += roman[txt[i:i+2]]
                        i += 2
                    else:
                        num += roman[txt[i]]
                        i += 1
                return num
            def gtoi(txt: str) -> int:
                greek = {'\u0391': 1, '\u0392': 2, '\u0393': 3, '\u0394': 4, '\u0395': 5, '\u03da': 6, '\u0396': 7, '\u0397': 8, '\u0398': 9, '\u0399': 10, '\u039a': 20, '\u039b': 30, '\u039c': 40, '\u039d': 50, '\u039e': 60, '\u039f': 70, '\u03a0': 80, '\u03d8': 90, '\u03a1': 100, '\u03a3': 200, '\u03a4': 300, '\u03a5': 400, '\u03a6': 500, '\u03a7': 600, '\u03a8': 700, '\u03a9': 800, '\u03e0': 900}
                i = 0
                num = 0
                while i < len(txt):
                    if i + 1 < len(txt) and txt[i] == '\u0375':
                        num += greek[txt[i+1]] * 1000
                        i += 2
                    elif txt[i] in greek:
                        num += greek[txt[i]]
                        i += 1
                    else:
                        i += 1
                return num
            if self.last() == other.last():
                if self.first() == other.first():
                    if self.middle() == other.middle():
                        if self.nickname() == other.nickname():
                            if self.suffix() == other.suffix() or {self.suffix(), other.suffix()} < {'Sr.', 'I', '\u0391\u0374'} or {self.suffix(), other.suffix()} < {'Jr.', 'II', '\u0392\u0374'}:
                                return self.title() in {'Mister', 'Mr.', 'Mistress', 'Mrs.', 'Miss', 'Ms.'} and other.title() in {'Doctor', 'Dr.'} or self.title() == '' and other.title() != ''
                            return self.suffix() == '' and other.suffix() != '' or self.suffix() == 'Esq.' and other.suffix() not in {'', 'Esq.'} or self.suffix() in {'Sr.', 'I', '\u0391\u0374'} and (other.suffix() == 'Jr.' or (rtoi(other.suffix()) >= 2 if re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', other.suffix().lower()) else (gtoi(other.suffix()) if re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', other.suffix().lower()) else other.suffix() == 'Jr.'))) or self.suffix() == 'Jr.' and (rtoi(other.suffix()) >= 3 if re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', other.suffix().lower()) else (gtoi(other.suffix()) if re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', other.suffix().lower()) else False)) or ((gtoi(self.suffix()) if re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', self.suffix().lower()) else rtoi(self.suffix())) < (gtoi(other.suffix()) if re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', other.suffix().lower()) else rtoi(other.suffix())) if (re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', self.suffix().lower()) or re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', self.suffix().lower())) and (re.search('^m{0,3}(c[md]|d?c{0,3})(x[cl]|l?x{0,3})(i[xv]|v?i{0,3})$', other.suffix().lower()) or re.search('^(\u0375[\u03b1-\u03b8\u03db][\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?)|([\u03c1\u03c3-\u03c9\u03e1]?[\u03b9-\u03c0\u03d9]?[\u03b1-\u03b8\u03db]?\u0374)$', other.suffix().lower())) else False)
                        return self.nickname() < other.nickname()
                    return self.middle() < other.middle()
                return self.first() < other.first()
            return self.last() < other.last()
        def __le__(self, other) -> bool:
            return self < other or self == other
        def __gt__(self, other) -> bool:
            return other < self
        def __ge__(self, other) -> bool:
            return self > other or self == other
        def __key(self) -> tuple:
            return (self.first(), self.middle(), self.last(), self.suffix(), self.nickname(), self.title())
        def __hash__(self) -> int:
            return hash(self.__key())
    class date:
        class Month(Enum):
            JAN = 1
            FEB = 2
            MAR = 3
            APR = 4
            MAY = 5
            JUN = 6
            JUL = 7
            AUG = 8
            SEPT = 9
            OCT = 10
            NOV = 11
            DEC = 12
            NULL = math.nan
            def _missing_(cls, value):
                return Person.date.Month.NULL
        def __init__(self, year: Union[int, float] = math.nan, month: str = 'null', day: Union[int, float] = math.nan, hour: Union[int, float] = math.nan, minute: Union[int, float] = math.nan, second: Union[int, float] = math.nan, micro: Union[int, float] = math.nan, tz: str = 'Z', dst: bool = False):
            self.__year = year if type(year) in {int} and year != 0 else math.nan
            self.__month = self.Month[month.upper()] if type(month) in {str} else Person.date.Month.NULL
            self.__day = day if type(day) in {int} and 1 <= day and day <= (31 if self.__month.name in {'JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC'} else (30 if self.__month.name in {'APR', 'JUN', 'SEPT', 'NOV'} else (29 if self.__month.name == 'FEB' and not math.isnan(self.__year) and ((self.__year + (1 if self.__year < 0 else 0)) % 400 == 0 or (self.__year + (1 if self.__year < 0 else 0)) % 4 == 0 and (self.__year + (1 if self.__year < 0 else 0)) % 100 != 0) else (28 if self.__month.name == 'FEB' and not math.isnan(self.__year) and ((self.__year + (1 if self.__year < 0 else 0)) % 4 != 0 or (self.__year + (1 if self.__year < 0 else 0)) % 100 == 0 and (self.__year + (1 if self.__year < 0 else 0)) % 400 != 0) else (28 if self.__month.name == 'FEB' and math.isnan(self.__year) else math.nan))))) else math.nan
            self.__hour = hour if not math.isnan(self.__day) and type(hour) in {int} and 0 <= hour and hour <= 23 else math.nan
            self.__minute = minute if not math.isnan(self.__hour) and type(minute) in {int} and 0 <= minute and minute <= 59 else math.nan
            self.__second = second + micro / 1.0e6 if not math.isnan(self.__minute) and type(second) in {int} and 0 <= second and second <= 59 and type(micro) in {int, float} and 0 <= micro and micro < 1.0e6 else math.nan
            self.__zone = tz if not math.isnan(self.__minute) and type(tz) in {str} and tz in {'Y', 'X', 'W', 'V\u2020', 'V', 'U', 'T', 'S', 'R', 'Q', 'P\u2020', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'C\u2020', 'D', 'D\u2020', 'E', 'E\u2020', 'E*', 'F', 'F\u2020', 'G', 'H', 'H*', 'I', 'I\u2020', 'K', 'K\u2020', 'L', 'M', 'M*', 'M\u2020', 'M\u2021'} else 'Z'
            self.__dst = dst if not math.isnan(self.__minute) and type(dst) in {bool} else False
        def year(self) -> Union[int, float]:
            return self.__year
        def month(self) -> Month:
            return self.__month
        def day(self) -> Union[int, float]:
            return self.__day
        def hour(self) -> Union[int, float]:
            return self.__hour
        def minute(self) -> Union[int, float]:
            return self.__minute
        def second(self) -> float:
            return self.__second
        def timeZone(self) -> str:
            return self.__zone
        def isDST(self) -> bool:
            return self.__dst
        def weekday(self) -> str:
            y = self.year() + (1 if self.year() < 0 else 0)
            y += int((self.month().value - 14) / 12)
            c = y // 100
            y %= 100
            m = self.month().value - 2 - 12 * int((self.month().value - 14) / 12)
            d = self.day()
            return ['U', 'M', 'T', 'W', 'R', 'F', 'S'][(d + math.floor(2.6 * m - 0.2) + y + y // 4 + c // 4 - 2 * c) % 7]
        def toJulian(self):
            N = self.year() // 100 + 1
            day = self.day() - (3 * N // 4 - 2)
            month = self.month()
            year = self.year()
            while day < 1:
                month = Person.date.Month(month.value - (1 if month != Person.date.Month.JAN else -11))
                year -= 1 if month == Person.date.Month.DEC else 0
                if year == 0:
                    year -= 1
                day += 31 if month.name in {'JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC'} else (30 if month.name in {'APR', 'JUN', 'SEPT', 'NOV'} else (29 if month == Person.date.Month.FEB and not math.isnan(year) and (year + (1 if year < 0 else 0)) % 4 == 0 else 28))
            while day > (31 if month.name in {'JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC'} else (30 if month.name in {'APR', 'JUN', 'SEPT', 'NOV'} else (29 if month == Person.date.Month.FEB and not math.isnan(year) and (year + (1 if year < 0 else 0)) % 4 == 0 else 28))):
                day -= 31 if month.name in {'JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC'} else (30 if month.name in {'APR', 'JUN', 'SEPT', 'NOV'} else (29 if month == Person.date.Month.FEB and not math.isnan(year) and (year + (1 if year < 0 else 0)) % 4 == 0 else 28))
                month = Person.date.Month(month.value + (1 if month != Person.date.Month.DEC else -11))
                year += 1 if month == Person.date.Month.JAN else 0
                if year == 0:
                    year += 1
            return Person.julian(year, month.name, day, self.hour(), self.minute(), int(self.second()) if not math.isnan(self.second()) else self.second(), self.second() * 1.0e6 % 1.0e6, self.timeZone(), self.isDST())
        def toJulianDay(self) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            y = self.year() + (1 if self.year() < 0 else 0)
            m = self.month().value
            d = self.day()
            hour = self.hour() - (1 if self.isDST() else 0)
            minute = self.minute()
            second = self.second()
            hour -= ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12
            minute -= 45 if '*' in self.timeZone() else (30 if '\u2020' in self.timeZone() and self.timeZone() != 'M\u2020' and ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12 > 0 else (-30 if '\u2020' in self.timeZone() and self.timeZone() != 'M\u2020' and ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) < 0 else (60 if self.timeZone() == 'M\u2020' else (120 if self.timeZone() == 'M\u2021' else 0))))
            if minute < 0:
                minute += 60
                hour -= 1
            elif minute >= 60:
                minute -= 60
                hour += 1
            if hour < 0:
                hour += 24
                d -= 1
            elif hour >= 24:
                hour -= 24
                d += 1
            if d < 1:
                m -= 1 if m != 1 else -11
                y -= 1 if m == 12 else 0
                d += 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))
            elif d > (31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))):
                d -= 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))
                m += 1 if m != 12 else -11
                y += 1 if m == 1 else 0
            if not math.isnan(m):
                if not math.isnan(d):
                    return int((1461 * (y + 4800 + int((m - 14) / 12))) / 4) + int((367 * (m - 2 - 12 * int((m - 14) / 12))) / 12) - int((3 * int((y + 4900 + int((m - 14) / 12)) / 100)) / 4) + d - 32075 + ((hour - 12) / 24 if not math.isnan(hour) else 0) + (minute / (24 * 60) if not math.isnan(minute) else 0) + (second / (24 * 3600) if not math.isnan(second) else 0) if not math.isnan(y) else math.nan
                return (Person.date(y - (1 if y <= 0 else 0), Person.date.Month(m).name, 1).toJulianDay(), Person.date(y - (1 if y <= 0 else 0), Person.date.Month(m).name, 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))).toJulianDay()) if not math.isnan(y) else math.nan
            return (Person.date(y - (1 if y <= 0 else 0), 'jan', 1).toJulianDay(), Person.date(y - (1 if y <= 0 else 0), 'dec', 31).toJulianDay()) if not math.isnan(y) else math.nan
        def toStardate(self):
            '''http://rinsanity.weebly.com/stardate-converter.html'''
            return self, {'Julian Day': self.toJulianDay(), 'Modified Julian Day': self.toJulianDay() - 2400000.5 if type(self.toJulianDay()) in {int, float} else (self.toJulianDay()[0] - 2400000.5, self.toJulianDay()[1] - 2400000.5), 'Ordinal Date': self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.2425) / 10 ** int(math.log(round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.2425 + (0.01 if (self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.2425 % 1 == 0.5 else 0)), 10) + 1) if type(self.toJulianDay()) in {int, float} else (self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.2425) / 10 ** int(math.log(round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.2425 + (0.01 if (self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.2425 == 0.5 % 1 else 0)), 10) + 1), self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.2425) / 10 ** int(math.log(round((self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.2425 + (0.01 if (self - Person.date(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.2425 % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (self - Person.date(1946, 'jul', 14, 18)) * 365.2425 * 1000 / 365.25 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1946, 'jul', 14, 18))[0] * 365.2425 * 1000 / 365.25, (self - Person.date(1946, 'jul', 14, 18))[1] * 365.2425 * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * 365.2425 * 2.736 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * 365.2425 * 2.736, (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * 365.2425 * 2.736), 'Major Tom': (self - Person.date(1922, 'may', 25, 0)) * 365.2425 * 2.7378508 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 365.2425 * 2.7378508, (self - Person.date(1922, 'may', 25, 0))[1] * 365.2425 * 2.7378508), 'Anthodev': (self - Person.date(1922, 'may', 25, 0)) * 365.2425 * 1000 / 365.2527 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 365.2425 * 1000 / 365.2527, (self - Person.date(1922, 'may', 25, 0))[1] * 365.2425 * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (self - Person.date(2323, 'jan', 1, 0)) * 365.2425 * 1000 / 365.2467262967927 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 365.2425 * 1000 / 365.2467262967927, (self - Person.date(2323, 'jan', 1, 0))[1] * 365.2425 * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (self - Person.date(2323, 'jan', 1, 0)) * 1000 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 1000, (self - Person.date(2323, 'jan', 1, 0))[1] * 1000), 'TrekGuide (TOS)': (self - Person.date(2265, 'apr', 25, 0)) * 365.2425 * 2635.10833 / 365.2422 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2265, 'apr', 25, 0))[0] * 365.2425 * 2635.10833 / 365.2422, (self - Person.date(2265, 'apr', 25, 0))[1] * 365.2425 * 2635.10833 / 365.2422)}['Ordinal Date' if self < Person.date(2265, 'apr', 25, 0) else ('TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= self and self < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)')]
        def toGalacticStandard(self):
            return Person.galactic()
        def __repr__(self) -> str:
            time = ''
            if not math.isnan(self.minute()):
                time += '{:02d}{:02d}{:02d}{}{}{:02d}'.format(self.day(), self.hour(), self.minute(), self.timeZone(), self.month().name, abs(self.year()) % 100) if not math.isnan(self.year()) else ''
            else:
                time += str(self.day()) if not math.isnan(self.day()) else ''
                time += ((' ' if len(time) > 0 else '') + Person.Name(self.month().name).first()) if not math.isnan(self.month().value) else ''
                time += ((' ' if len(time) > 0 else '') + str(abs(self.year())) + (' B' if self.year() < 0 else ' ') + 'CE') if not math.isnan(self.year()) else ''
            return time
        def __str__(self) -> str:
            time = '{:+05d}'.format(self.year() + (1 if self.year() < 0 else 0)) if not math.isnan(self.year() + (1 if self.year() < 0 else 0)) else ''
            time += '{}-{:02d}'.format('-' if len(time) == 0 else '', self.month().value) if not math.isnan(self.month().value) else ''
            time += '-{:02d}'.format(self.day()) if not math.isnan(self.day()) else ''
            if not math.isnan(self.day()):
                time += 'T{:02d}:{:02d}'.format(self.hour(), self.minute()) if not math.isnan(self.minute()) else ''
                time += ':{:06.3f}'.format(self.second() if not math.isnan(self.second()) else 0) if not math.isnan(self.minute()) else ''
                time += '{:+03d}:{:02d}'.format(['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12 + (1 if self.isDST() else 0), 45 if '*' in self.timeZone() else 0) if not math.isnan(self.minute()) else ''
            return time
        def __eq__(self, other) -> bool:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return self.toJulianDay() == other.toJulianDay() or math.isnan(self.toJulianDay()) and math.isnan(other.toJulianDay())
                return False
            if type(other.toJulianDay()) in {int, float}:
                return False
            return self.toJulianDay() == other.toJulianDay()
        def __ne__(self, other) -> bool:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return not (self.toJulianDay() == other.toJulianDay() or math.isnan(self.toJulianDay()) and math.isnan(other.toJulianDay()))
                return True
            if type(other.toJulianDay()) in {int, float}:
                return True
            return self.toJulianDay() != other.toJulianDay()
        def __lt__(self, other) -> bool:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return self.toJulianDay() < other.toJulianDay() or math.isnan(self.toJulianDay()) and not math.isnan(other.toJulianDay())
                return self.toJulianDay() < other.toJulianDay()[0] or math.isnan(self.toJulianDay())
            if type(other.toJulianDay()) in {int, float}:
                return self.toJulianDay()[1] < other.toJulianDay()
            return self.toJulianDay()[1] < other.toJulianDay()[0]
        def __le__(self, other) -> bool:
            return self < other or self == other
        def __gt__(self, other) -> bool:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return self.toJulianDay() > other.toJulianDay() or not math.isnan(self.toJulianDay()) and math.isnan(other.toJulianDay())
                return self.toJulianDay() > other.toJulianDay()[1]
            if type(other.toJulianDay()) in {int, float}:
                return self.toJulianDay()[0] > other.toJulianDay() or math.isnan(other.toJulianDay())
            return self.toJulianDay()[0] > other.toJulianDay()[1]
        def __ge__(self, other) -> bool:
            return self > other or self == other
        def __sub__(self, other) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return (self.toJulianDay() - other.toJulianDay()) / 365.2425
                return math.nan if math.isnan(self.toJulianDay()) else ((self.toJulianDay() - other.toJulianDay()[1]) / 365.2425, (self.toJulianDay() - other.toJulianDay()[0]) / 365.2425)
            if type(other.toJulianDay()) in {int, float}:
                return math.nan if math.isnan(other.toJulianDay()) else ((self.toJulianDay()[0] - other.toJulianDay()) / 365.2425, (self.toJulianDay()[1] - other.toJulianDay()) / 365.2425)
            return ((self.toJulianDay()[0] - other.toJulianDay()[1]) / 365.2425, (self.toJulianDay()[1] - other.toJulianDay()[0]) / 365.2425)
        def __key(self) -> tuple:
            return (self.year(), self.month(), self.day(), self.hour(), self.minute(), self.second(), self.timeZone(), self.isDST())
        def __hash__(self) -> int:
            return hash(self.__key())
    class julian(date):
        def __init__(self, year: Union[int, float] = math.nan, month: str = 'null', day: Union[int, float] = math.nan, hour: Union[int, float] = math.nan, minute: Union[int, float] = math.nan, second: Union[int, float] = math.nan, micro: Union[int, float] = math.nan, tz: str = 'Z', dst: bool = False):
            # super().__init__(year, month)
            Person.date.__init__(self, year, month)
            self.__day = day if type(day) in {int} and 1 <= day and day <= (31 if self.month().name in {'JAN', 'MAR', 'MAY', 'JUL', 'AUG', 'OCT', 'DEC'} else (30 if self.month().name in {'APR', 'JUN', 'SEPT', 'NOV'} else (29 if self.month() == Person.date.Month.FEB and not math.isnan(self.year()) and (self.year() + (1 if self.year() < 0 else 0)) % 4 == 0 else (28 if self.month() == Person.date.Month.FEB and not math.isnan(self.year()) and (self.year() + (1 if self.year() < 0 else 0)) % 4 != 0 else (28 if self.month() == Person.date.Month.FEB and math.isnan(self.year()) else math.nan))))) else math.nan
            self.__hour = hour if not math.isnan(self.__day) and type(hour) in {int} and 0 <= hour and hour <= 23 else math.nan
            self.__minute = minute if not math.isnan(self.__hour) and type(minute) in {int} and 0 <= minute and minute <= 59 else math.nan
            self.__second = second + micro / 1.0e6 if not math.isnan(self.__minute) and type(second) in {int} and 0 <= second and second <= 59 and type(micro) in {int, float} and 0 <= micro and micro < 1.0e6 else math.nan
            self.__zone = tz if not math.isnan(self.__minute) and type(tz) in {str} and tz in {'Y', 'X', 'W', 'V\u2020', 'V', 'U', 'T', 'S', 'R', 'Q', 'P\u2020', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'C\u2020', 'D', 'D\u2020', 'E', 'E\u2020', 'E*', 'F', 'F\u2020', 'G', 'H', 'H*', 'I', 'I\u2020', 'K', 'K\u2020', 'L', 'M', 'M*', 'M\u2020', 'M\u2021'} else 'Z'
            self.__dst = dst if not math.isnan(self.__minute) and type(dst) in {bool} else False
        def day(self) -> Union[int, float]:
            return self.__day
        def hour(self) -> Union[int, float]:
            return self.__hour
        def minute(self) -> Union[int, float]:
            return self.__minute
        def second(self) -> float:
            return self.__second
        def timeZone(self) -> str:
            return self.__zone
        def isDST(self) -> bool:
            return self.__dst
        def weekday(self) -> str:
            return ['U', 'M', 'T', 'W', 'R', 'F', 'S'][(round(self.toJulianDay()) + 1) % 7]
        def toJulian(self):
            return self
        def toJulianDay(self) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            y = self.year() + (1 if self.year() < 0 else 0)
            m = self.month().value
            d = self.day()
            hour = self.hour() - (1 if self.isDST() else 0)
            minute = self.minute()
            second = self.second()
            hour -= ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12
            minute -= 45 if '*' in self.timeZone() else (30 if '\u2020' in self.timeZone() and self.timeZone() != 'M\u2020' and ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12 > 0 else (-30 if '\u2020' in self.timeZone() and self.timeZone() != 'M\u2020' and ['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) < 0 else (60 if self.timeZone() == 'M\u2020' else (120 if self.timeZone() == 'M\u2021' else 0))))
            if minute < 0:
                minute += 60
                hour -= 1
            elif minute >= 60:
                minute -= 60
                hour += 1
            if hour < 0:
                hour += 24
                d -= 1
            elif hour >= 24:
                hour -= 24
                d += 1
            if d < 1:
                m -= 1 if m != 1 else -11
                y -= 1 if m == 12 else 0
                d += 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))
            elif d > (31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))):
                d -= 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and (y % 400 == 0 or y % 4 == 0 and y % 100 != 0) else 28))
                m += 1 if m != 12 else -11
                y += 1 if m == 1 else 0
            if not math.isnan(m):
                if not math.isnan(d):
                    return 367 * y - int((7 * (y + 5001 + int((m - 9) / 7))) / 4) + int((275 * m) / 9) + d + 1729777 + ((hour - 12) / 24 if not math.isnan(hour) else 0) + (minute / (24 * 60) if not math.isnan(minute) else 0) + (second / (24 * 3600) if not math.isnan(second) else 0) if not math.isnan(y) else math.nan
                return (Person.julian(y - (1 if y <= 0 else 0), Person.date.Month(m).name, 1).toJulianDay(), Person.julian(y - (1 if y <= 0 else 0), Person.date.Month(m).name, 31 if m in {1, 3, 5, 7, 8, 10, 12} else (30 if m in {4, 6, 9, 11} else (29 if m == 2 and not math.isnan(y - (1 if y <= 0 else 0)) and y % 4 == 0 else 28))).toJulianDay()) if not math.isnan(y) else math.nan
            return (Person.julian(y - (1 if y <= 0 else 0), 'jan', 1).toJulianDay(), Person.julian(y - (1 if y <= 0 else 0), 'dec', 31).toJulianDay()) if not math.isnan(y) else math.nan
        def toStardate(self):
            return self, {'Julian Day': self.toJulianDay(), 'Modified Julian Day': self.toJulianDay() - 2400000.5 if type(self.toJulianDay()) in {int, float} else (self.toJulianDay()[0] - 2400000.5, self.toJulianDay()[1] - 2400000.5), 'Ordinal Date': self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.25) / 10 ** int(math.log(round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.25 + (0.01 if (self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31)) * 365.25 % 1 == 0.5 else 0)), 10) + 1) if type(self.toJulianDay()) in {int, float} else (self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.25) / 10 ** int(math.log(round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.25 + (0.01 if (self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[0] * 365.25 % 1 == 0.5 else 0)), 10) + 1), self.year() + (1 if self.year() < 0 else 0) + (1 if self.year() >= -1 else -1) * round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.25) / 10 ** int(math.log(round((self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.25 + (0.01 if (self - Person.julian(self.year() - 1 - (1 if self.year() - 1 == 0 else 0), 'dec', 31))[1] * 365.25 % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (self - Person.date(1946, 'jul', 14, 18)) * 1000 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1946, 'jul', 14, 18))[0] * 1000, (self - Person.date(1946, 'jul', 14, 18))[1] * 1000), 'Hynes': math.nan, 'STO Academy': (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * 365.25 * 2.736 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * 365.25 * 2.736, (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * 365.25 * 2.736), 'Major Tom': (self - Person.date(1922, 'may', 25, 0)) * 365.25 * 2.7378508 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 365.25 * 2.7378508, (self - Person.date(1922, 'may', 25, 0))[1] * 365.25 * 2.7378508), 'Anthodev': (self - Person.date(1922, 'may', 25, 0)) * 365.25 * 1000 / 365.2527 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 365.25 * 1000 / 365.2527, (self - Person.date(1922, 'may', 25, 0))[1] * 365.25 * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (self - Person.date(2323, 'jan', 1, 0)) * 365.25 * 1000 / 365.2467262967927 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 365.25 * 1000 / 365.2467262967927, (self - Person.date(2323, 'jan', 1, 0))[1] * 365.25 * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (self - Person.date(2323, 'jan', 1, 0)) * 365.25 * 1000 / 365.2425 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 365.25 * 1000 / 365.2425, (self - Person.date(2323, 'jan', 1, 0))[1] * 365.25 * 1000 / 365.2425), 'TrekGuide (TOS)': (self - Person.date(2265, 'apr', 25, 0)) * 365.25 * 2635.10833 / 365.2422 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2265, 'apr', 25, 0))[0] * 365.25 * 2635.10833 / 365.2422, (self - Person.date(2265, 'apr', 25, 0))[1] * 365.25 * 2635.10833 / 365.2422)}['TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= self and self < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)']
        def __sub__(self, other) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return (self.toJulianDay() - other.toJulianDay()) / 365.25
                return math.nan if math.isnan(self.toJulianDay()) else ((self.toJulianDay() - other.toJulianDay()[1]) / 365.25, (self.toJulianDay() - other.toJulianDay()[0]) / 365.25)
            if type(other.toJulianDay()) in {int, float}:
                return math.nan if math.isnan(other.toJulianDay()) else ((self.toJulianDay()[0] - other.toJulianDay()) / 365.25, (self.toJulianDay()[1] - other.toJulianDay()) / 365.25)
            return ((self.toJulianDay()[0] - other.toJulianDay()[1]) / 365.25, (self.toJulianDay()[1] - other.toJulianDay()[0]) / 365.25)
    class galactic(date):
        '''http://kotor.griffcrier.com/workbench/the-star-wars-calendar/'''
        class Month(Enum):
            ELONA = 1
            KELONA = 2 # >= 29 days
            SELONA = 3
            TELONA = 4
            NELONA = 5 # 31 days
            HELONA = 6
            MELONA = 7 # 31 days
            YELONA = 8
            RELONA = 9
            WELONA = 10 # 31 days
            NULL = math.nan
            def _missing_(cls, value):
                return Person.date.Month.NULL
        def __init__(self, year: Union[int, float] = math.nan, month: str = 'null', day: Union[int, float] = math.nan, hour: Union[int, float] = math.nan, minute: Union[int, float] = math.nan, second: Union[int, float] = math.nan, micro: Union[int, float] = math.nan):
            # super().__init__()
            Person.date.__init__(self)
            self.__year = year if type(year) in {int} else math.nan
            self.__month = (Person.Name(month).first() if month.lower() in {'tapani day', 'expansion week', 'productivity day', 'shelova week', 'harvest day', 'winter fete'} else self.Month[month.upper()]) if type(month) in {str} else Person.galactic.Month.NULL
            self.__day = day if type(day) in {int} and 1 <= day and day <= (5 if self.__month in {'Expansion Week', 'Shelova Week', 'Winter Fete'} else (1 if self.__month in {'Tapani Day', 'Productivity Day', 'Harvest Day'} else (31 if self.__month.name in {'NELONA', 'MELONA', 'WELONA'} else (36 if self.__month.name in {'SELONA', 'HELONA', 'RELONA'} else (40 if self.__month.name in {'ELONA', 'TELONA', 'YELONA'} else (29 if self.__month == Person.galactic.Month.KELONA else math.nan)))))) else math.nan
            self.__hour = hour if not math.isnan(self.__day) and type(hour) in {int} and 0 <= hour and hour <= 23 else math.nan
            self.__minute = minute if not math.isnan(self.__hour) and type(minute) in {int} and 0 <= minute and minute <= 59 else math.nan
            self.__second = second + micro / 1.0e6 if not math.isnan(self.__minute) and type(second) in {int} and 0 <= second and second <= 59 and type(micro) in {int, float} and 0 <= micro and micro < 1.0e6 else math.nan
            self.__zone = 'Z'
            self.__dst = False
        def year(self) -> Union[int, float]:
            return self.__year
        def month(self) -> Union[str, Month]:
            return self.__month
        def day(self) -> Union[int, float]:
            return self.__day
        def hour(self) -> Union[int, float]:
            return self.__hour
        def minute(self) -> Union[int, float]:
            return self.__minute
        def second(self) -> float:
            return self.__second
        def timeZone(self) -> str:
            return self.__zone
        def isDST(self) -> bool:
            return self.__dst
        def weekday(self) -> str:
            return ['Primeday', 'Centaxday', 'Taungsday', 'Zhellday', 'Benduday'][(round(self.toJulianDay()) + 1) % 5]
        def toJulian(self):
            f = round(self.toJulianDay()) + 1401
            e = 4 * f + 3
            g = int(e % 1461 / 4)
            h = 5 * g + 2
            day = int(h % 153 / 5) + 1
            month = Person.date.Month((int(h / 153) + 2) % 12 + 1)
            year = int(e / 1461) - 4716 + int((14 - month.value) / 12)
            return Person.julian(year - (1 if year <= 0 else 0), month.name, day, self.hour(), self.minute(), int(self.second()) if not math.isnan(self.second()) else math.nan, self.second() * 1.0e6 % 1.0e6)
        def toJulianDay(self) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            if type(self.month()) in {str} or not math.isnan(self.month().value):
                if not math.isnan(self.day()):
                    y = 0
                    m = 1
                    j = 0
                    while y < abs(self.year()):
                        j += 368 * (-1) ** (1 if self.year() < 0 else 0)
                        y += 1
                    while m < (self.month().value if type(self.month()) not in {str} else (2.5 if self.month() == 'Tapani Day' else (3.5 if self.month() == 'Expansion Week' else (5.5 if self.month() == 'Productivity Day' else (6.5 if self.month() == 'Shelova Week' else (8.5 if self.month() == 'Harvest Day' else 10.5)))))):
                        j += 5 if m in {3.5, 6.5, 10.5} else (1 if m in {2.5, 5.5, 8.5} else (31 if m in {5, 7, 10} else (36 if m in {3, 6, 9} else (40 if m in {1, 4, 8} else 29))))
                        m += 0.5 if m in {2, 2.5, 3, 3.5, 5, 5.5, 6, 6.5, 8, 8.5, 10} else 1
                    j += self.day() - 1
                    return j + Person.date(-1, 'jan', 1).toJulianDay() + ((self.hour() - 12) / 24 if not math.isnan(self.hour()) else 0) + (self.minute() / (24 * 60) if not math.isnan(self.minute()) else 0) + (self.second() / (24 * 3600) if not math.isnan(self.second()) else 0) if not math.isnan(self.year()) else math.nan
                return (Person.galactic(self.year(), self.month() if type(self.month()) in {str} else self.month().name, 1).toJulianDay(), Person.galactic(self.year(), self.month() if type(self.month()) in {str} else self.month().name, 5 if self.__month in {'Expansion Week', 'Shelova Week', 'Winter Fete'} else (1 if self.__month in {'Tapani Day', 'Productivity Day', 'Harvest Day'} else (31 if self.__month.name in {'NELONA', 'MELONA', 'WELONA'} else (36 if self.__month.name in {'SELONA', 'HELONA', 'RELONA'} else (40 if self.__month.name in {'ELONA', 'TELONA', 'YELONA'} else (29 if self.__month == Person.galactic.Month.KELONA else math.nan)))))).toJulianDay()) if not math.isnan(self.year()) else math.nan
            return (Person.galactic(self.year(), 'elona', 1).toJulianDay(), Person.galactic(self.year(), 'winter fete', 5).toJulianDay()) if not math.isnan(self.year()) else math.nan
        def toStardate(self):
            return self, {'Julian Day': self.toJulianDay(), 'Modified Julian Day': self.toJulianDay() - 2400000.5 if type(self.toJulianDay()) in {int, float} else (self.toJulianDay()[0] - 2400000.5, self.toJulianDay()[1] - 2400000.5), 'Ordinal Date': self.year() + (1 if self.year() >= 0 else -1) * round((self - Person.galactic(self.year() - 1, 'winter fete', 5)) * 368) / 10 ** int(math.log(round((self - Person.galactic(self.year() - 1, 'winter fete', 5)) * 368 + (0.01 if (self - Person.galactic(self.year() - 1, 'winter fete', 5)) * 368 % 1 == 0.5 else 0)), 10) + 1) if type(self.toJulianDay()) in {int, float} else (self.year() + (1 if self.year() >= 0 else -1) * round((self - Person.galactic(self.year() - 1, 'winter fete', 5))[0] * 368) / 10 ** int(math.log(round((self - Person.galactic(self.year() - 1, 'winter fete', 5))[0] * 368 + (0.01 if (self - Person.galactic(self.year() - 1, 'winter fete', 5))[0] * 368 % 1 == 0.5 else 0)), 10) + 1), self.year() + (1 if self.year() >= 0 else -1) * round((self - Person.galactic(self.year() - 1, 'winter fete', 5))[1] * 368) / 10 ** int(math.log(round((self - Person.galactic(self.year() - 1, 'winter fete', 5))[1] * 368 + (0.01 if (self - Person.galactic(self.year() - 1, 'winter fete', 5))[1] * 368 % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (self - Person.date(1946, 'jul', 14, 18)) * 368 * 1000 / 365.25 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1946, 'jul', 14, 18))[0] * 368 * 1000 / 365.25, (self - Person.date(1946, 'jul', 14, 18))[1] * 368 * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * 368 * 2.736 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * 368 * 2.736, (self - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * 368 * 2.736), 'Major Tom': (self - Person.date(1922, 'may', 25, 0)) * 368 * 2.7378508 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 368 * 2.7378508, (self - Person.date(1922, 'may', 25, 0))[1] * 368 * 2.7378508), 'Anthodev': (self - Person.date(1922, 'may', 25, 0)) * 368 * 1000 / 365.2527 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(1922, 'may', 25, 0))[0] * 368 * 1000 / 365.2527, (self - Person.date(1922, 'may', 25, 0))[1] * 368 * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (self - Person.date(2323, 'jan', 1, 0)) * 368 * 1000 / 365.2467262967927 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 368 * 1000 / 365.2467262967927, (self - Person.date(2323, 'jan', 1, 0))[1] * 368 * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (self - Person.date(2323, 'jan', 1, 0)) * 368 * 1000 / 365.2425 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2323, 'jan', 1, 0))[0] * 368 * 1000 / 365.2425, (self - Person.date(2323, 'jan', 1, 0))[1] * 368 * 1000 / 365.2425), 'TrekGuide (TOS)': (self - Person.date(2265, 'apr', 25, 0)) * 368 * 2635.10833 / 365.2422 if type(self.toJulianDay()) in {int, float} else ((self - Person.date(2265, 'apr', 25, 0))[0] * 368 * 2635.10833 / 365.2422, (self - Person.date(2265, 'apr', 25, 0))[1] * 368 * 2635.10833 / 365.2422)}['TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= self and self < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)']
        def toGalacticStandard(self):
            return self
        def __repr__(self) -> str:
            time = ''
            if not math.isnan(self.minute()):
                time = '{:02d}:{:02d}'.format(self.hour(), self.minute())
                time += ':{:06.3f}'.format(self.second() if not math.isnan(self.second()) else 0)
                time += '{:+03d}:{:02d}'.format(['Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M'].index(self.timeZone()[0]) - 12 + (1 if self.isDST() else 0), 45 if '*' in self.timeZone() else 0)
                time += ', {}'.format(self.day())
                time += ' {}'.format(self.month() if type(self.month()) in {str} else Person.Name(self.month().name).first())
                time += ' {} {}BY'.format(abs(self.year()), 'B' if self.year() < 0 else 'A') if not math.isnan(self.year()) else ''
            else:
                time += str(self.day()) if not math.isnan(self.day()) else ''
                time += ((' ' if len(time) > 0 else '') + Person.Name(self.month() if type(self.month()) in {str} else self.month().name).first()) if ((not math.isnan(self.month().value)) if type(self.month()) not in {str} else True) else ''
                time += ((' ' if len(time) > 0 else '') + str(abs(self.year())) + (' B' if self.year() < 0 else ' A') + 'BY') if not math.isnan(self.year()) else ''
            return time
        def __str__(self) -> str:
            return repr(self)
        def __sub__(self, other) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
            if type(self.toJulianDay()) in {int, float}:
                if type(other.toJulianDay()) in {int, float}:
                    return (self.toJulianDay() - other.toJulianDay()) / 368
                return math.nan if math.isnan(self.toJulianDay()) else ((self.toJulianDay() - other.toJulianDay()[1]) / 368, (self.toJulianDay() - other.toJulianDay()[0]) / 368)
            if type(other.toJulianDay()) in {int, float}:
                return math.nan if math.isnan(other.toJulianDay()) else ((self.toJulianDay()[0] - other.toJulianDay()) / 368, (self.toJulianDay()[1] - other.toJulianDay()) / 368)
            return ((self.toJulianDay()[0] - other.toJulianDay()[1]) / 368, (self.toJulianDay()[1] - other.toJulianDay()[0]) / 368)
    now = date(datetime.utcnow().year, date.Month(datetime.utcnow().month).name, datetime.utcnow().day, datetime.utcnow().hour, datetime.utcnow().minute, datetime.utcnow().second, datetime.utcnow().microsecond)
    def __init__(self, name: Name, gender: np.ndarray, birth: Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]]], death: Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]], None], pseudo: Name, alias: Name = Name(), species: SeqRecord = SeqRecord(Seq(''))):
        self.__name = name if type(name) in {Person.Name} else Person.Name()
        self.__gender = gender if type(gender) in {np.ndarray} and gender.dtype in {np.dtype([('body', 'S20'), ('id', 'S20'), ('expr', 'S20')])} and gender.shape == (1,) and gender[0]['body'] in {b'male', b'female', b'intersex'} and gender[0]['id'] in {b'man', b'woman', b'non-binary'} and gender[0]['expr'] in {b'masculine', b'feminine', b'androgynous'} else np.array([], dtype=np.dtype([('body', 'S20'), ('id', 'S20'), ('expr', 'S20')]))
        self.__birth = birth if type(birth) in {Person.date, Person.julian, Person.galactic} or ((len(birth) == 2 and (birth[1] == {'Julian Day': birth[0].toJulianDay(), 'Modified Julian Day': birth[0].toJulianDay() - 2400000.5 if type(birth[0].toJulianDay()) in {int, float} else (birth[0].toJulianDay()[0] - 2400000.5, birth[0].toJulianDay()[1] - 2400000.5), 'Ordinal Date': birth[0].year() + (1 if birth[0].year() < 0 else 0) + (1 if birth[0].year() >= -1 else -1) * round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) + (0.01 if (birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1) if type(birth[0].toJulianDay()) in {int, float} else (birth[0].year() + (1 if birth[0].year() < 0 else 0) + (1 if birth[0].year() >= -1 else -1) * round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) + (0.01 if (birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) == 0.5 % 1 else 0)), 10) + 1), birth[0].year() + (1 if birth[0].year() < 0 else 0) + (1 if birth[0].year() >= -1 else -1) * round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) + (0.01 if (birth[0] - (Person.date(birth[0].year() - 1 - (1 if birth[0].year() - 1 == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.date} else (Person.julian(birth[0].year() - 1 - (1 if birth[0].year() == 0 else 0), 'dec', 31) if type(birth[0]) in {Person.julian} else Person.galactic(birth[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (birth[0] - Person.date(1946, 'jul', 14, 18)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.25 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(1946, 'jul', 14, 18))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.25, (birth[0] - Person.date(1946, 'jul', 14, 18))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (birth[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.736 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.736, (birth[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.736), 'Major Tom': (birth[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.7378508 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.7378508, (birth[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2.7378508), 'Anthodev': (birth[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2527 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2527, (birth[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (birth[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927, (birth[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (birth[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2425 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2425, (birth[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 1000 / 365.2425), 'TrekGuide (TOS)': (birth[0] - Person.date(2265, 'apr', 25, 0)) * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422 if type(birth[0].toJulianDay()) in {int, float} else ((birth[0] - Person.date(2265, 'apr', 25, 0))[0] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422, (birth[0] - Person.date(2265, 'apr', 25, 0))[1] * (365.2425 if type(birth[0]) in {Person.date} else (365.25 if type(birth[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422)}['Ordinal Date' if birth[0] < Person.date(2265, 'apr', 25, 0) else ('TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= birth[0] and birth[0] < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)')] or math.isnan(birth[1]) if type(birth[0]) in {Person.date, Person.julian, Person.galactic} else False)) if type(birth) in {tuple} else False) else Person.date()
        self.__death = death if type(death) == type(self.__birth) or ((len(death) == 2 and (death[1] == {'Julian Day': death[0].toJulianDay(), 'Modified Julian Day': death[0].toJulianDay() - 2400000.5 if type(death[0].toJulianDay()) in {int, float} else (death[0].toJulianDay()[0] - 2400000.5, death[0].toJulianDay()[1] - 2400000.5), 'Ordinal Date': death[0].year() + (1 if death[0].year() < 0 else 0) + (1 if death[0].year() >= -1 else -1) * round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) + (0.01 if (death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1) if type(death[0].toJulianDay()) in {int, float} else (death[0].year() + (1 if death[0].year() < 0 else 0) + (1 if death[0].year() >= -1 else -1) * round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) + (0.01 if (death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) == 0.5 % 1 else 0)), 10) + 1), death[0].year() + (1 if death[0].year() < 0 else 0) + (1 if death[0].year() >= -1 else -1) * round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) + (0.01 if (death[0] - (Person.date(death[0].year() - 1 - (1 if death[0].year() - 1 == 0 else 0), 'dec', 31) if type(death[0]) in {Person.date} else (Person.julian(death[0].year() - 1 - (1 if death[0].year() == 0 else 0), 'dec', 31) if type(death[0]) in {Person.julian} else Person.galactic(death[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (death[0] - Person.date(1946, 'jul', 14, 18)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.25 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(1946, 'jul', 14, 18))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.25, (death[0] - Person.date(1946, 'jul', 14, 18))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (death[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.736 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.736, (death[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.736), 'Major Tom': (death[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.7378508 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.7378508, (death[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2.7378508), 'Anthodev': (death[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2527 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2527, (death[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (death[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927, (death[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (death[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2425 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2425, (death[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 1000 / 365.2425), 'TrekGuide (TOS)': (death[0] - Person.date(2265, 'apr', 25, 0)) * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422 if type(death[0].toJulianDay()) in {int, float} else ((death[0] - Person.date(2265, 'apr', 25, 0))[0] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422, (death[0] - Person.date(2265, 'apr', 25, 0))[1] * (365.2425 if type(death[0]) in {Person.date} else (365.25 if type(death[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422)}['Ordinal Date' if death[0] < Person.date(2265, 'apr', 25, 0) else ('TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= death[0] and death[0] < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)')] or math.isnan(death[1]) if type(death[0]) in {Person.date, Person.julian, Person.galactic} else False)) if type(self.__birth) in {tuple} and type(death) == type(self.__birth) else False) else None
        # self.__age = (self.__death if type(self.__death) == type(self.__birth) else self.now) - self.__birth
        # self.__age = ((self.__death if type(self.__death) in {Person.date, Person.julian, Person.galactic} else (self.__death[0 if self.__death[0] < Person.date(2265, 'apr', 25, 0) else 1] if type(self.__death) in {tuple} else (self.now if type(self.now) in {Person.date, Person.julian, Person.galactic} else self.now[0 if self.now[0] < Person.date(2265, 'apr', 25, 0) else 1]))) - (self.__birth if type(self.__birth) in {Person.date, Person.julian, Person.galactic} else self.__birth[0 if self.__birth[0] < Person.date(2265, 'apr', 25, 0) else 1]))
        self.__age = math.nan
        if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date, Person.julian, Person.galactic}:
            if type(self.__birth) in {Person.date, Person.julian, Person.galactic}:
                self.__age = (self.__death if type(self.__death) == type(self.__birth) else self.now) - self.__birth
            else:
                self.__age = (self.__death if type(self.__death) == type(self.__birth) else self.now) - self.__birth[0]
            if type(self.__age) in {int, float}:
                self.__age *= (365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000))
            else:
                self.__age = (self.__age[0] * ((365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000))), self.__age[1] * ((365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.date} else (365.25 if type(self.__death if type(self.__death) == type(self.__birth) else self.now) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now) and (self.__death if type(self.__death) == type(self.__birth) else self.now) < Person.date(2323, 'jan', 1, 0) else 1000))))
        else:
            if type(self.__birth) in {Person.date, Person.julian, Person.galactic}:
                self.__age = (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] - self.__birth
            else:
                self.__age = (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] - self.__birth[0]
            if type(self.__age) in {int, float}:
                self.__age *= (365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000))
            else:
                self.__age = (self.__age[0] * ((365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000))), self.__age[1] * ((365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) * (1 if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.date} else (365.25 if type((self.__death if type(self.__death) == type(self.__birth) else self.now)[0]) in {Person.julian} else 368)) if (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] and (self.__death if type(self.__death) == type(self.__birth) else self.now)[0] < Person.date(2323, 'jan', 1, 0) else 1000))))
        self.__pseudo = pseudo if type(pseudo) in {Person.Name} else Person.Name()
        self.__pref = Person.Name()
        self.__alias = alias if type(alias) in {Person.Name} else Person.Name()
        self.__species = species if type(species) in {SeqRecord} and 2 <= len(species.name.split()) and len(species.name.split()) <= 3 and set(species.annotations.keys()) >= {'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'} | ({'subspecies'} if len(species.name.split()) == 3 else set()) and species.annotations['species' if len(species.name.split()) == 2 else 'subspecies'].lower() == species.name.lower() and species.annotations['species'].split()[0].lower() == species.annotations['genus'].lower() and (species.annotations['subspecies'].split()[0].lower() == species.annotations['genus'].lower() and ' '.join(species.annotations['subspecies'].split()[:2]).lower() == species.annotations['species'].lower() if 'subspecies' in species.annotations else True) else SeqRecord(Seq(''))
        self.__species.name = self.__species.name[0].upper() + self.__species.name[1:].lower()
        if len(self.__species.annotations) > 0:
            self.__species.annotations['species'] = self.__species.annotations['species'][0].upper() + self.__species.annotations['species'][1:].lower()
            if 'subspecies' in self.__species.annotations:
                self.__species.annotations['subspecies'] = self.__species.annotations['subspecies'][0].upper() + self.__species.annotations['subspecies'][1:].lower()
            for k in self.__species.annotations:
                if k in {'kingdom', 'phylum', 'subphylum', 'class', 'order', 'suborder', 'infraorder', 'family', 'genus'}:
                    self.__species.annotations[k] = Person.Name(self.__species.annotations[k]).first()
        if len(self.__species.features) == 1 and len(self.__species.features.qualifiers) > 0:
            if set(species.features.qualifiers.keys()) == {'lvl', 'pts'}:
                if type(self.__species.features.qualifiers['lvl']) in {int} and type(self.__species.features.qualifiers['pts']) in {int}:
                    pass
    def name(self) -> Name:
        names = [self.__name.first(), self.__name.middle(), self.__name.last(), self.__name.suffix(), self.__name.nickname(), self.__name.title()]
        if names[-1] in {'Mr.', 'Mrs.', 'Ms.', 'Dr.'}:
            names[-1] = {'Mr.': 'Mister', 'Mrs.': 'Mistress', 'Ms.': 'Miss', 'Dr.': 'Doctor'}[names[-1]]
        for name in range(len(names)):
            if name != 3:
                names[name] = list(names[name])
                for n in range(len(names[name])):
                    if names[name][n] != Person.Name(''.join(names[name])).first()[n]:
                        names[name][n] = '\u0000' + names[name][n]
                names[name] = ''.join(names[name])
        name = Person.Name(*names)
        if self.__name.title() in {'Mr.', 'Mrs.', 'Ms.', 'Dr.'}:
            name.setTitle()
        return name
    def gender(self) -> np.ndarray:
        return self.__gender
    def birth(self) -> Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]]]:
        return self.__birth
    def death(self) -> Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]], None]:
        return self.__death
    def timeTravel(self, src: Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]]], dst: Union[date, julian, galactic, Tuple[Union[date, julian, galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]]], death: bool = False):
        if (type(src) == type(self.birth()) or ((len(src) == 2 and (src[1] == {'Julian Day': src[0].toJulianDay(), 'Modified Julian Day': src[0].toJulianDay() - 2400000.5 if type(src[0].toJulianDay()) in {int, float} else (src[0].toJulianDay()[0] - 2400000.5, src[0].toJulianDay()[1] - 2400000.5), 'Ordinal Date': src[0].year() + (1 if src[0].year() < 0 else 0) + (1 if src[0].year() >= -1 else -1) * round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) + (0.01 if (src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1) if type(src[0].toJulianDay()) in {int, float} else (src[0].year() + (1 if src[0].year() < 0 else 0) + (1 if src[0].year() >= -1 else -1) * round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) + (0.01 if (src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) == 0.5 % 1 else 0)), 10) + 1), src[0].year() + (1 if src[0].year() < 0 else 0) + (1 if src[0].year() >= -1 else -1) * round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) + (0.01 if (src[0] - (Person.date(src[0].year() - 1 - (1 if src[0].year() - 1 == 0 else 0), 'dec', 31) if type(src[0]) in {Person.date} else (Person.julian(src[0].year() - 1 - (1 if src[0].year() == 0 else 0), 'dec', 31) if type(src[0]) in {Person.julian} else Person.galactic(src[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (src[0] - Person.date(1946, 'jul', 14, 18)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.25 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(1946, 'jul', 14, 18))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.25, (src[0] - Person.date(1946, 'jul', 14, 18))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (src[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.736 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.736, (src[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.736), 'Major Tom': (src[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.7378508 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.7378508, (src[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2.7378508), 'Anthodev': (src[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2527 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2527, (src[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (src[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927, (src[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (src[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2425 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2425, (src[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 1000 / 365.2425), 'TrekGuide (TOS)': (src[0] - Person.date(2265, 'apr', 25, 0)) * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422 if type(src[0].toJulianDay()) in {int, float} else ((src[0] - Person.date(2265, 'apr', 25, 0))[0] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422, (src[0] - Person.date(2265, 'apr', 25, 0))[1] * (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422)}['Ordinal Date' if src[0] < Person.date(2265, 'apr', 25, 0) else ('TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)')] or math.isnan(src[1]) if type(src[0]) in {Person.date, Person.julian, Person.galactic} else False)) if type(self.birth()) in {tuple} and type(src) == type(self.birth()) else False)) and (type(dst) == type(src) or ((len(dst) == 2 and (dst[1] == {'Julian Day': dst[0].toJulianDay(), 'Modified Julian Day': dst[0].toJulianDay() - 2400000.5 if type(dst[0].toJulianDay()) in {int, float} else (dst[0].toJulianDay()[0] - 2400000.5, dst[0].toJulianDay()[1] - 2400000.5), 'Ordinal Date': dst[0].year() + (1 if dst[0].year() < 0 else 0) + (1 if dst[0].year() >= -1 else -1) * round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) + (0.01 if (dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5)))) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1) if type(dst[0].toJulianDay()) in {int, float} else (dst[0].year() + (1 if dst[0].year() < 0 else 0) + (1 if dst[0].year() >= -1 else -1) * round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) + (0.01 if (dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) == 0.5 % 1 else 0)), 10) + 1), dst[0].year() + (1 if dst[0].year() < 0 else 0) + (1 if dst[0].year() >= -1 else -1) * round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368))) / 10 ** int(math.log(round((dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) + (0.01 if (dst[0] - (Person.date(dst[0].year() - 1 - (1 if dst[0].year() - 1 == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.date} else (Person.julian(dst[0].year() - 1 - (1 if dst[0].year() == 0 else 0), 'dec', 31) if type(dst[0]) in {Person.julian} else Person.galactic(dst[0].year() - 1, 'winter fete', 5))))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) % 1 == 0.5 else 0)), 10) + 1)), 'TrekGuide (Out-of-Universe)': (dst[0] - Person.date(1946, 'jul', 14, 18)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.25 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(1946, 'jul', 14, 18))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.25, (dst[0] - Person.date(1946, 'jul', 14, 18))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.25), 'Hynes': math.nan, 'STO Academy': (dst[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.736 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.736, (dst[0] - Person.date(1922, 'may', 2, 21, 1, 6, 315793.991088867))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.736), 'Major Tom': (dst[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.7378508 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.7378508, (dst[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2.7378508), 'Anthodev': (dst[0] - Person.date(1922, 'may', 25, 0)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2527 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(1922, 'may', 25, 0))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2527, (dst[0] - Person.date(1922, 'may', 25, 0))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2527), 'Main': math.nan, 'Kennedy': math.nan, 'Schmidt': (dst[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927, (dst[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2467262967927), 'Pugh': math.nan, 'Pugh (fixed year)': (dst[0] - Person.date(2323, 'jan', 1, 0)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2425 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(2323, 'jan', 1, 0))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2425, (dst[0] - Person.date(2323, 'jan', 1, 0))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 1000 / 365.2425), 'TrekGuide (TOS)': (dst[0] - Person.date(2265, 'apr', 25, 0)) * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422 if type(dst[0].toJulianDay()) in {int, float} else ((dst[0] - Person.date(2265, 'apr', 25, 0))[0] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422, (dst[0] - Person.date(2265, 'apr', 25, 0))[1] * (365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * 2635.10833 / 365.2422)}['Ordinal Date' if dst[0] < Person.date(2265, 'apr', 25, 0) else ('TrekGuide (TOS)' if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 'Pugh (fixed year)')] or math.isnan(dst[1]) if type(dst[0]) in {Person.date, Person.julian, Person.galactic} else False)) if type(src) in {tuple} and type(dst) == type(src) else False)):
            if (self.now if type(self.now) in {Person.date, Person.julian, Person.galactic} else self.now[0]) == (Person.now if type(Person.now) in {Person.date, Person.julian, Person.galactic} else Person.now[0]):
                # self.__age = src - self.birth() if self.__age == (self.death() if type(self.death()) == type(self.birth()) else self.now) - self.birth() else self.__age
                self.__age = math.nan
                if type(src) in {Person.date, Person.julian, Person.galactic}:
                    if type(self.birth()) in {Person.date, Person.julian, Person.galactic}:
                        self.__age = src - self.birth()
                    else:
                        self.__age = src - self.birth()[0]
                    if type(self.__age) in {int, float}:
                        self.__age *= (365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))
                    else:
                        self.__age = (self.__age[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), self.__age[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))
                else:
                    if type(self.__birth) in {Person.date, Person.julian, Person.galactic}:
                        self.__age = src[0] - self.birth()
                    else:
                        self.__age = src[0] - self.birth()[0]
                    if type(self.__age) in {int, float}:
                        self.__age *= (365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))
                    else:
                        self.__age = (self.__age[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), self.__age[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))))
            else:
                if type(self.__age) in {int, float}:
                    if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float}:
                        self.__age += 0 if (math.isnan(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else ((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))
                    else:
                        self.__age = self.__age if (math.isnan(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[0], self.__age + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[1])
                else:
                    if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float}:
                        self.__age = self.__age if (math.isnan(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age[0] + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))), self.__age[1] + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))))
                    else:
                        self.__age = self.__age if (math.isnan(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age[0] + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[0], self.__age[1] + (((((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0])) in {int, float} else (((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[0] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))), ((src - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src - self.now[0]))[1] * ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) * (1 if src < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src) in {Person.date} else (365.25 if type(src) in {Person.julian} else 368)) if src < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src and src < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(src) in {Person.date, Person.julian, Person.galactic} else ((((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0])) in {int, float} else (((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[0] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((src[0] - self.now) if type(self.now) in {Person.date, Person.julian, Person.galactic} else (src[0] - self.now[0]))[1] * ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) * (1 if src[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(src[0]) in {Person.date} else (365.25 if type(src[0]) in {Person.julian} else 368)) if src[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= src[0] and src[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[1])
            if type(self.__age) in {int, float}:
                if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float}:
                    self.__age += 0 if (math.isnan(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else abs(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2)
                else:
                    self.__age = self.__age if (math.isnan(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age + abs((((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[0]) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2), self.__age + abs((((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[1]) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2))
            else:
                if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float}:
                    self.__age = self.__age if (math.isnan(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age[0] + abs(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2), self.__age[1] + abs(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2))
                else:
                    self.__age = self.__age if (math.isnan(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) if type(((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))))) in {int, float} else False) else (self.__age[0] + abs((((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[0]) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2), self.__age[1] + abs((((((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0])) in {int, float} else (((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[0] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst - src[0]))[1] * ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) * (1 if dst < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst) in {Person.date} else (365.25 if type(dst) in {Person.julian} else 368)) if dst < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst and dst < Person.date(2323, 'jan', 1, 0) else 1000))))) if type(dst) in {Person.date, Person.julian, Person.galactic} else ((((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000)))) if type((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0])) in {int, float} else (((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[0] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))), ((dst[0] - src) if type(src) in {Person.date, Person.julian, Person.galactic} else (dst[0] - src[0]))[1] * ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) * (1 if dst[0] < Person.date(2265, 'apr', 25, 0) else ((2635.10833 / 365.2422) if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000 / 365.2425)) / ((365.2425 if type(dst[0]) in {Person.date} else (365.25 if type(dst[0]) in {Person.julian} else 368)) if dst[0] < Person.date(2265, 'apr', 25, 0) else (2635.10833 if Person.date(2265, 'apr', 25, 0) <= dst[0] and dst[0] < Person.date(2323, 'jan', 1, 0) else 1000))))))[1]) * math.sqrt(1 - ((299792456 if not death else 299792458) / 299792458) ** 2))
            if type(self.__age) in {tuple}:
                if math.isnan(self.__age[0]) or math.isnan(self.__age[1]):
                    self.__age = math.nan
            self.now = dst
    def age(self) -> Union[int, float, Tuple[Union[int, float], Union[int, float]]]:
        return self.__age
    def pseudo(self) -> Name:
        names = [self.__pseudo.first(), self.__pseudo.middle(), self.__pseudo.last(), self.__pseudo.suffix(), self.__pseudo.nickname(), self.__pseudo.title()]
        if names[-1] in {'Mr.', 'Mrs.', 'Ms.', 'Dr.'}:
            names[-1] = {'Mr.': 'Mister', 'Mrs.': 'Mistress', 'Ms.': 'Miss', 'Dr.': 'Doctor'}[names[-1]]
        for name in range(len(names)):
            if name != 3:
                names[name] = list(names[name])
                for n in range(len(names[name])):
                    if names[name][n] != Person.Name(''.join(names[name])).first()[n]:
                        names[name][n] = '\u0000' + names[name][n]
                names[name] = ''.join(names[name])
        name = Person.Name(*names)
        if self.__pseudo.title() in {'Mr.', 'Mrs.', 'Ms.', 'Dr.'}:
            name.setTitle()
        return name
    def prefName(self) -> Name:
        return self.__pref
    def setPrefName(self, opt, first=0, middle=1, last=2, suffix=3, nick=4, title=5):
        names = [[self.name().first(), self.name().middle(), self.name().last(), self.name().suffix(), self.name().nickname(), self.name().title()], [self.pseudo().first(), self.pseudo().middle(), self.pseudo().last(), self.pseudo().suffix(), self.pseudo().nickname(), self.pseudo().title()]][opt]
        names = ['Junior' if first == 3 and names[3] in {'Jr.', 'II'} else (names[first if 0 <= first and first <= 2 or first == 4 else 0] if first != -1 else ''), 'Junior' if middle == 3 and names[3] in {'Jr.', 'II'} else (names[middle if 0 <= middle and middle <= 2 or middle == 4 else 1] if middle != -1 else ''), names[last if 0 <= last and last <= 2 or last == 4 else 2] if last != -1 else '', names[suffix if suffix == 3 else 3] if suffix != -1 else '', 'Junior' if nick == 3 and names[3] in {'Jr.', 'II'} else (names[nick if nick == 4 else 4] if nick != -1 else ''), names[title if title == 5 else 5] if title != -1 else '']
        if names[-1] in {'Mr.', 'Mrs.', 'Ms.', 'Dr.'}:
            names[-1] = {'Mr.': 'Mister', 'Mrs.': 'Mistress', 'Ms.': 'Miss', 'Dr.': 'Doctor'}[names[-1]]
        for name in range(len(names)):
            if name != 3:
                names[name] = list(names[name])
                for n in range(len(names[name])):
                    if names[name][n] != Person.Name(''.join(names[name])).first()[n]:
                        names[name][n] = '\u0000' + names[name][n]
                names[name] = ''.join(names[name])
        self.__pref = Person.Name(*names)
    def maskedName(self) -> Name:
        return self.__alias
    def species(self) -> SeqRecord:
        return self.__species
    def __repr__(self) -> str:
        result = 'Name: {}'.format(self.prefName() if self.prefName() != Person.Name() else (self.name() if self.name() != Person.Name() else (self.pseudo() if self.pseudo() != Person.Name() else 'N/A')))
        result += '\nGender: {}'.format(self.gender())
        result += '\nDate of Birth: {}'.format((('{} \u2013 {}'.format(round(self.birth()[1][0], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1][0], round(self.birth()[1][1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1][1]) if (round(self.birth()[1][0], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[0].toJulianDay()[0]) != (round(self.birth()[1][1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[0].toJulianDay()[1]) else round((self.birth()[1][0] + self.birth()[1][1]) / 2, 1)) if type(self.birth()[1]) in {tuple} else (round(self.birth()[1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1])) if type(self.birth()) in {tuple} else (self.birth() if len(str(self.birth())) > 0 else 'N/A'))
        result += '\nDate of Death: {}'.format((('{} \u2013 {}'.format(round(self.death()[1][0], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1][0], round(self.death()[1][1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1][1]) if (round(self.death()[1][0], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[0].toJulianDay()[0]) != (round(self.death()[1][1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[0].toJulianDay()[1]) else round((self.death()[1][0] + self.death()[1][1]) / 2, 1)) if type(self.death()[1]) in {tuple} else (round(self.death()[1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1])) if type(self.death()) in {tuple} else (self.death() if len(str(self.death())) > 0 else 'N/A')) if type(self.death()) == type(self.birth()) else ''
        result += ' (Age: {})'.format(('{} \u2013 {}'.format(int(self.age()[0]), int(self.age()[1])) if int(self.age()[0]) != int(self.age()[1]) else int((self.age()[0] + self.age()[1]) / 2)) if type(self.age()) in {tuple} else (int(self.age()) if not math.isnan(self.age()) else 'N/A'))
        return result
    def __str__(self) -> str:
        result = 'Name: {}'.format(self.prefName() if self.prefName() != Person.Name() else (self.name() if self.name() != Person.Name() else (self.pseudo() if self.pseudo() != Person.Name() else 'N/A')))
        result += '\nMasked Name: {}'.format(self.maskedName() if self.maskedName() != Person.Name() else 'N/A')
        result += '\nDate of Birth: {}'.format((('{} \u2013 {}'.format(round(self.birth()[1][0], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1][0], round(self.birth()[1][1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1][1]) if (round(self.birth()[1][0], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[0].toJulianDay()[0]) != (round(self.birth()[1][1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[0].toJulianDay()[1]) else round((self.birth()[1][0] + self.birth()[1][1]) / 2, 1)) if type(self.birth()[1]) in {tuple} else (round(self.birth()[1], 1) if self.birth()[0] >= Person.date(2265, 'apr', 25, 0) else self.birth()[1])) if type(self.birth()) in {tuple} else (self.birth() if len(str(self.birth())) > 0 else 'N/A'))
        result += '\nDate of Death: {}'.format((('{} \u2013 {}'.format(round(self.death()[1][0], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1][0], round(self.death()[1][1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1][1]) if (round(self.death()[1][0], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[0].toJulianDay()[0]) != (round(self.death()[1][1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[0].toJulianDay()[1]) else round((self.death()[1][0] + self.death()[1][1]) / 2, 1)) if type(self.death()[1]) in {tuple} else (round(self.death()[1], 1) if self.death()[0] >= Person.date(2265, 'apr', 25, 0) else self.death()[1])) if type(self.death()) in {tuple} else (self.death() if len(str(self.death())) > 0 else 'N/A')) if type(self.death()) == type(self.birth()) else ''
        result += ' (Age: {})'.format(('{} \u2013 {}'.format(int(self.age()[0]), int(self.age()[1])) if int(self.age()[0]) != int(self.age()[1]) else int((self.age()[0] + self.age()[1]) / 2)) if type(self.age()) in {tuple} else (int(self.age()) if not math.isnan(self.age()) else 'N/A'))
        return result
    def __eq__(self, other) -> bool:
        return self.name() == other.name() and np.array_equal(self.gender(), other.gender()) and (self.age() == other.age() or math.isnan(self.age()) and math.isnan(other.age()) if type(self.age()) in {int, float} and type(other.age()) in {int, float} else (False if type(self.age()) in {int, float} and type(other.age()) in {tuple} or type(self.age()) in {tuple} and type(other.age()) in {int, float} else self.age() == other.age())) and self.birth() == other.birth() and self.death() == other.death() and self.pseudo() == other.pseudo() and self.prefName() == other.prefName() and self.maskedName() == other.maskedName() and self.species().seq == other.species().seq and self.species().name == other.species().name and self.species().annotations == other.species().annotations and self.species().features == other.species().features
    def __ne__(self, other) -> bool:
        return self.name() != other.name() or not np.array_equal(self.gender(), other.gender()) or not (self.age() == other.age() or math.isnan(self.age()) and math.isnan(other.age()) if type(self.age()) in {int, float} and type(other.age()) in {int, float} else (False if type(self.age()) in {int, float} and type(other.age()) in {tuple} or type(self.age()) in {tuple} and type(other.age()) in {int, float} else self.age() == other.age())) or self.birth() != other.birth() or self.death() != other.death() or self.pseudo() != other.pseudo() or self.prefName() != other.prefName() or self.maskedName() != other.maskedName() or self.species().seq != other.species().seq or self.species().name != other.species().name or self.species().annotations != other.species().annotations or self.species().features != other.species().features
    def __lt__(self, other) -> bool:
        if self.species().seq == other.species().seq and self.species().name == other.species().name and self.species().annotations == other.species().annotations and self.species().features == other.species().features:
            if self.age() == other.age() or math.isnan(self.age()) and math.isnan(other.age()) if type(self.age()) in {int, float} and type(other.age()) in {int, float} else (False if type(self.age()) in {int, float} and type(other.age()) in {tuple} or type(self.age()) in {tuple} and type(other.age()) in {int, float} else self.age() == other.age()):
                if self.name() == other.name():
                    if self.pseudo() == other.pseudo():
                        if self.prefName() == other.prefName():
                            return False
                        return self.prefName() < other.prefName()
                    return self.pseudo() < other.pseudo()
                return self.name() < other.name()
            if type(self.age()) in {int, float}:
                if type(other.age()) in {int, float}:
                    return self.age() < other.age() or math.isnan(self.age()) and not math.isnan(other.age())
                return self.age() < other.age()[0] or math.isnan(self.age())
            if type(other.age()) in {int, float}:
                return self.age()[1] < other.age()
            return self.age()[1] < other.age()[0]
        return False
    def __le__(self, other) -> bool:
        return self < other or self == other
    def __gt__(self, other) -> bool:
        if self.age() == other.age() or math.isnan(self.age()) and math.isnan(other.age()) if type(self.age()) in {int, float} and type(other.age()) in {int, float} else (False if type(self.age()) in {int, float} and type(other.age()) in {tuple} or type(self.age()) in {tuple} and type(other.age()) in {int, float} else self.age() == other.age()):
            if self.name() == other.name():
                if self.pseudo() == other.pseudo():
                    return self.prefName() > other.prefName()
                return self.pseudo() > other.pseudo()
            return self.name() > other.name()
        if type(self.age()) in {int, float}:
            if type(other.age()) in {int, float}:
                return self.age() > other.age() or not math.isnan(self.age()) and math.isnan(other.age())
            return self.age() > other.age()[1]
        if type(other.age()) in {int, float}:
            return self.age()[0] > other.age() or math.isnan(other.age())
        return self.age()[0] > other.age()[1]
    def __ge__(self, other) -> bool:
        return self > other or self == other
    def __key(self) -> tuple:
        return (self.name(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species().seq, self.species().name, frozenset({(k, self.species().annotations[k]) for k in self.species().annotations}))
    def __hash__(self) -> int:
        return hash(self.__key())
class Worker(Person):
    def __init__(self, person: Person, job: str, wage: Union[int, float]):
        super(Worker, self).__init__(person.name(), person.gender(), person.birth(), person.death(), person.pseudo(), person.maskedName(), person.species())
        self.__job = Person.Name(job).first()
        self.__wage = wage if type(wage) in {int, float} and wage >= 0 else math.nan
    def job(self) -> str:
        return self.__job
    def wage(self) -> Union[int, float]:
        return self.__wage
    def __repr__(self) -> str:
        result = 'Name: {}'.format(self.prefName() if self.prefName() != Person.Name() else (self.name() if self.name() != Person.Name() else (self.pseudo() if self.pseudo() != Person.Name() else 'N/A')))
        result += '\nJob: {}'.format(self.job() if self.job() != '' else 'N/A')
        result += '\nWage: {}'.format(self.wage())
        return result
    def __eq__(self, other) -> bool:
        return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) == Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()) and ((self.job() == other.job() and (self.wage() == other.wage() or math.isnan(self.wage()) and math.isnan(other.wage()))) if type(other) in {Worker} else False)
    def __ne__(self, other) -> bool:
        return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) != Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()) or ((self.job() != other.job() or not (self.wage() == other.wage() or math.isnan(self.wage()) and math.isnan(other.wage()))) if type(other) in {Worker} else True)
    def __lt__(self, other) -> bool:
        if not hasattr(other, 'job') or not hasattr(other, 'wage'):
            return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) < Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species())
        if self.wage() == other.wage():
            if self.job() == other.job():
                return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) < Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species())
            return self.job() < other.job()
        return self.wage() < other.wage()
    def __le__(self, other) -> bool:
        return self < other or self == other
    def __gt__(self, other) -> bool:
        if not hasattr(other, 'job') or not hasattr(other, 'wage'):
            return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) > Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species())
        if self.wage() == other.wage():
            if self.job() == other.job():
                return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) > Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species())
            return self.job() > other.job()
        return self.wage() > other.wage()
    def __ge__(self, other) -> bool:
        return self > other or self == other
    def __key(self) -> tuple:
        return (Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()), self.job(), self.wage())
    def __hash__(self) -> int:
        return hash(self.__key())
class Student(Worker):
    def __init__(self, person: Union[Worker, Person], degree: str, major: str):
        super(Student, self).__init__(Person(Person.Name(''.join([person.name().first()[l] if person.name().first()[l] == Person.Name(person.name().first()).first()[l] else '\u0000' + person.name().first()[l] for l in range(len(person.name().first()))]), ''.join([person.name().middle()[l] if person.name().middle()[l] == Person.Name(person.name().middle()).first()[l] else '\u0000' + person.name().middle()[l] for l in range(len(person.name().middle()))]), ''.join([person.name().last()[l] if person.name().last()[l] == Person.Name(person.name().last()).first()[l] else '\u0000' + person.name().last()[l] for l in range(len(person.name().last()))]), person.name().suffix(), ''.join([person.name().nickname()[l] if person.name().nickname()[l] == Person.Name(person.name().nickname()).first()[l] else '\u0000' + person.name().nickname()[l] for l in range(len(person.name().nickname()))]), 'doctor' if degree.lower() in {'doctor \u0000of philosophy', 'doctor \u0000of medicine'} else person.name().title()), person.gender(), person.birth(), person.death(), person.pseudo(), person.maskedName(), person.species()), person.job() if (len(person.job()) > 0 and person.job() != 'Student' if type(person) in {Worker} else False) else 'student', person.wage() if type(person) in {Worker} else math.nan)
        self.__degree = Person.Name(degree).first() if degree.lower() in {'associate \u0000degree', 'bachelor \u0000of art', 'bachelor \u0000of science', 'master \u0000of art', 'master \u0000of science', 'doctor \u0000of philosophy', 'doctor \u0000of medicine'} else (degree.lower() if degree.lower() == 'diploma' else '')
        self.__major = Person.Name(major).first()
    def degree(self) -> str:
        return self.__degree
    def major(self) -> str:
        return self.__major
    def __repr__(self) -> str:
        result = 'Name: {}'.format(self.prefName() if self.prefName() != Person.Name() else (self.name() if self.name() != Person.Name() else (self.pseudo() if self.pseudo() != Person.Name() else 'N/A')))
        result += '\nDegree: {}'.format(self.degree() if len(self.degree()) > 0 else 'N/A')
        result += '\nMajor: {}'.format(self.major() if len(self.major()) else 'N/A')
        return result
    def __eq__(self, other) -> bool:
        return ((Worker(Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()), self.job(), self.wage()) == Worker(Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()), other.job(), other.wage())) if hasattr(other, 'job') and hasattr(other, 'wage') else False) and (self.degree() == other.degree() if type(other) in {Student} else False)
    def __ne__(self, other) -> bool:
        return ((Worker(Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()), self.job(), self.wage()) != Worker(Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()), other.job(), other.wage())) if hasattr(other, 'job') and hasattr(other, 'wage') else True) or (self.degree() != other.degree() if type(other) in {Student} else True)
    def __key(self) -> tuple:
        return (Worker(Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()), self.job(), self.wage()), self.degree())
    def __hash__(self) -> int:
        return hash(self.__key())
class Warrior(Person):
    def __init__(self, person: Union[Student, Worker, Person], branch: str, rank: str):
        super(Warrior, self).__init__(Person.Name(''.join([person.name().first()[l] if person.name().first()[l] == Person.Name(person.name().first()).first()[l] else '\u0000' + person.name().first()[l] for l in range(len(person.name().first()))]), ''.join([person.name().middle()[l] if person.name().middle()[l] == Person.Name(person.name().middle()).first()[l] else '\u0000' + person.name().middle()[l] for l in range(len(person.name().middle()))]), ''.join([person.name().last()[l] if person.name().last()[l] == Person.Name(person.name().last()).first()[l] else '\u0000' + person.name().last()[l] for l in range(len(person.name().last()))]), person.name().suffix(), ''.join([person.name().nickname()[l] if person.name().nickname()[l] == Person.Name(person.name().nickname()).first()[l] else '\u0000' + person.name().nickname()[l] for l in range(len(person.name().nickname()))]), rank if rank in ({'general', 'brigadier', 'colonel', 'lieutenant colonel', 'major', 'captain', 'lieutenant', 'second lieutenant', 'officer cadet', 'warrant officer', 'sergeant', 'corporal', 'private'} if branch.lower() in {'army', 'air force', 'space force'} else {'admiral', 'vice admiral', 'rear admiral', 'commodore', 'captain', 'commander', 'lieutenant commander', 'lieutenant', 'lieutenant junior grade', 'ensign', 'officer cadet', 'warrant officer', 'petty officer', 'leading seaman', 'seaman'}) else person.name().title()), person.gender(), person.birth(), person.death(), person.pseudo(), person.maskedName(), person.species())
        self.__branch = Person.Name(branch).first() if branch.lower() in {'army', 'air force', 'space force', 'navy'} else ''
    def branch(self) -> str:
        return self.__branch
    def __repr__(self) -> str:
        result = 'Name: {}'.format(self.prefName() if self.prefName() != Person.Name() else (self.name() if self.name() != Person.Name() else (self.pseudo() if self.pseudo() != Person.Name() else 'N/A')))
        result += '\nBranch: {}'.format(self.branch() if self.branch() != '' else 'N/A')
        return result
    def __eq__(self, other) -> bool:
        return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) == Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()) and ((self.branch() == other.branch()) if type(other) in {Warrior} else False)
    def __ne__(self, other) -> bool:
        return Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()) != Person(other.name(), other.gender(), other.birth(), other.death(), other.pseudo(), other.maskedName(), other.species()) or ((self.branch() != other.branch()) if type(other) in {Warrior} else True)
    def __key(self) -> tuple:
        return (Person(self.name(), self.gender(), self.birth(), self.death(), self.pseudo(), self.maskedName(), self.species()), self.branch())
    def __hash__(self) -> int:
        return hash(self.__key())

class Robot(Person):
    def __init__(self, name: Person.Name, birth: Union[Person.date, Person.julian, Person.galactic], death: Union[Person.date, Person.julian, Person.galactic, None], pseudo: Person.Name, use_arm: bool = True, use_base: bool = True, use_camera: bool = True, use_gripper: bool = True, arm_config: dict = dict(), base_config: dict = dict(), camera_config: dict = dict(), gripper_config: dict = dict(), common_config: dict = dict()):
        super(Robot, self).__init__(name, np.array([], dtype=np.dtype([('body', 'S20'), ('id', 'S20'), ('expr', 'S20')])), birth, death, pseudo)
'''class Robot(Person, pyrobot.core.Robot):
    def __init__(self, name: Person.Name, birth: Union[Person.date, Person.julian, Person.galactic, Tuple[Union[Person.date, Person.julian, Person.galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]]], death: Union[Person.date, Person.julian, Person.galactic, Tuple[Union[Person.date, Person.julian, Person.galactic], Union[int, float, Tuple[Union[int, float], Union[int, float]]]], None], pseudo: Person.Name):
        Person.__init__(self, name, np.array([], dtype=np.dtype([('body', 'S20'), ('id', 'S20'), ('expr', 'S20')])), birth, death, pseudo)
        pyrobot.core.Robot.__init__(self, '')'''